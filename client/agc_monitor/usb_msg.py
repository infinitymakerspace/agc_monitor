# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# ! AUTOGENERATED BY generate_interface.py, DO NOT EDIT !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
from collections import namedtuple
import struct

DATA_FMT = '>BHH'
READ_FMT = '>BH'
DATA_FLAG = 0x80

def pack(msg):
    return globals()['_pack_' + type(msg).__name__](msg)

def unpack(msg_bytes):
    if len(msg_bytes) != struct.calcsize(DATA_FMT):
        raise RuntimeError('Cannot unpack data with unexpected length %u' % len(msg_bytes))

    group, addr, data = struct.unpack(DATA_FMT, msg_bytes)
    if group in _unpack_mem_fns:
        return _unpack_mem_fns[group](addr, data)
    else:
        return _unpack_reg_fns[(group, addr)](data)

ReadSimErasable = namedtuple('ReadSimErasable', ['addr'])
ReadSimErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
SimErasable = namedtuple('SimErasable', ['addr', 'data'])
SimErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteSimErasable = namedtuple('WriteSimErasable', ['addr', 'data'])
WriteSimErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegA = namedtuple('ReadMonRegA', [])
ReadMonRegA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegA = namedtuple('MonRegA', ['a'])
MonRegA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegL = namedtuple('ReadMonRegL', [])
ReadMonRegL.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegL = namedtuple('MonRegL', ['l'])
MonRegL.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegQ = namedtuple('ReadMonRegQ', [])
ReadMonRegQ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegQ = namedtuple('MonRegQ', ['q'])
MonRegQ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegZ = namedtuple('ReadMonRegZ', [])
ReadMonRegZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegZ = namedtuple('MonRegZ', ['z'])
MonRegZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegBB = namedtuple('ReadMonRegBB', [])
ReadMonRegBB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegBB = namedtuple('MonRegBB', ['eb', 'fb'])
MonRegBB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegB = namedtuple('ReadMonRegB', [])
ReadMonRegB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegB = namedtuple('MonRegB', ['b'])
MonRegB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegS = namedtuple('ReadMonRegS', [])
ReadMonRegS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegS = namedtuple('MonRegS', ['s'])
MonRegS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegG = namedtuple('ReadMonRegG', [])
ReadMonRegG.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegG = namedtuple('MonRegG', ['g'])
MonRegG.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegY = namedtuple('ReadMonRegY', [])
ReadMonRegY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegY = namedtuple('MonRegY', ['y'])
MonRegY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegU = namedtuple('ReadMonRegU', [])
ReadMonRegU.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegU = namedtuple('MonRegU', ['u'])
MonRegU.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegI = namedtuple('ReadMonRegI', [])
ReadMonRegI.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegI = namedtuple('MonRegI', ['sqr', 'sqext', 'st', 'br'])
MonRegI.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegStatus = namedtuple('ReadMonRegStatus', [])
ReadMonRegStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegStatus = namedtuple('MonRegStatus', ['gojam', 'run', 'iip', 'inhl', 'inkl', 'outcom'])
MonRegStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegW = namedtuple('ReadMonRegW', [])
ReadMonRegW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegW = namedtuple('MonRegW', ['w'])
MonRegW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadFixed = namedtuple('ReadFixed', ['addr'])
ReadFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Fixed = namedtuple('Fixed', ['addr', 'data'])
Fixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonChanFEXT = namedtuple('ReadMonChanFEXT', [])
ReadMonChanFEXT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonChanFEXT = namedtuple('MonChanFEXT', ['fext'])
MonChanFEXT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadSimFixed = namedtuple('ReadSimFixed', ['addr'])
ReadSimFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
SimFixed = namedtuple('SimFixed', ['addr', 'data'])
SimFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteSimFixed = namedtuple('WriteSimFixed', ['addr', 'data'])
WriteSimFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadChannels = namedtuple('ReadChannels', ['addr'])
ReadChannels.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Channels = namedtuple('Channels', ['addr', 'data'])
Channels.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadErasable = namedtuple('ReadErasable', ['addr'])
ReadErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Erasable = namedtuple('Erasable', ['addr', 'data'])
Erasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlStart = namedtuple('WriteControlStart', ['start'])
WriteControlStart.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlStop = namedtuple('ReadControlStop', [])
ReadControlStop.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlStop = namedtuple('ControlStop', ['t12', 'nisq', 's1', 's2', 'w', 's_w', 's_i', 'chan', 'par', 'i', 'prog_step'])
ControlStop.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlStop = namedtuple('WriteControlStop', ['t12', 'nisq', 's1', 's2', 'w', 's_w', 's_i', 'chan', 'par', 'i', 'prog_step'])
WriteControlStop.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlStopCause = namedtuple('ReadControlStopCause', [])
ReadControlStopCause.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlStopCause = namedtuple('ControlStopCause', ['t12', 'nisq'])
ControlStopCause.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlProceed = namedtuple('WriteControlProceed', ['proceed'])
WriteControlProceed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlMNHRPT = namedtuple('ReadControlMNHRPT', [])
ReadControlMNHRPT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlMNHRPT = namedtuple('ControlMNHRPT', ['mnhrpt'])
ControlMNHRPT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlMNHRPT = namedtuple('WriteControlMNHRPT', ['mnhrpt'])
WriteControlMNHRPT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlMNHNC = namedtuple('ReadControlMNHNC', [])
ReadControlMNHNC.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlMNHNC = namedtuple('ControlMNHNC', ['mnhnc'])
ControlMNHNC.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlMNHNC = namedtuple('WriteControlMNHNC', ['mnhnc'])
WriteControlMNHNC.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1S = namedtuple('ReadControlS1S', [])
ReadControlS1S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1S = namedtuple('ControlS1S', ['s'])
ControlS1S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1S = namedtuple('WriteControlS1S', ['s'])
WriteControlS1S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1Bank = namedtuple('ReadControlS1Bank', [])
ReadControlS1Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1Bank = namedtuple('ControlS1Bank', ['eb', 'fext', 'fb'])
ControlS1Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1Bank = namedtuple('WriteControlS1Bank', ['eb', 'fext', 'fb'])
WriteControlS1Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1SIgnore = namedtuple('ReadControlS1SIgnore', [])
ReadControlS1SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1SIgnore = namedtuple('ControlS1SIgnore', ['s'])
ControlS1SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1SIgnore = namedtuple('WriteControlS1SIgnore', ['s'])
WriteControlS1SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1BankIgnore = namedtuple('ReadControlS1BankIgnore', [])
ReadControlS1BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1BankIgnore = namedtuple('ControlS1BankIgnore', ['eb', 'fext', 'fb'])
ControlS1BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1BankIgnore = namedtuple('WriteControlS1BankIgnore', ['eb', 'fext', 'fb'])
WriteControlS1BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2S = namedtuple('ReadControlS2S', [])
ReadControlS2S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2S = namedtuple('ControlS2S', ['s'])
ControlS2S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2S = namedtuple('WriteControlS2S', ['s'])
WriteControlS2S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2Bank = namedtuple('ReadControlS2Bank', [])
ReadControlS2Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2Bank = namedtuple('ControlS2Bank', ['eb', 'fext', 'fb'])
ControlS2Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2Bank = namedtuple('WriteControlS2Bank', ['eb', 'fext', 'fb'])
WriteControlS2Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2SIgnore = namedtuple('ReadControlS2SIgnore', [])
ReadControlS2SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2SIgnore = namedtuple('ControlS2SIgnore', ['s'])
ControlS2SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2SIgnore = namedtuple('WriteControlS2SIgnore', ['s'])
WriteControlS2SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2BankIgnore = namedtuple('ReadControlS2BankIgnore', [])
ReadControlS2BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2BankIgnore = namedtuple('ControlS2BankIgnore', ['eb', 'fext', 'fb'])
ControlS2BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2BankIgnore = namedtuple('WriteControlS2BankIgnore', ['eb', 'fext', 'fb'])
WriteControlS2BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlNHALGA = namedtuple('ReadControlNHALGA', [])
ReadControlNHALGA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlNHALGA = namedtuple('ControlNHALGA', ['nhalga'])
ControlNHALGA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlNHALGA = namedtuple('WriteControlNHALGA', ['nhalga'])
WriteControlNHALGA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlSTRT1 = namedtuple('ReadControlSTRT1', [])
ReadControlSTRT1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlSTRT1 = namedtuple('ControlSTRT1', ['strt1'])
ControlSTRT1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlSTRT1 = namedtuple('WriteControlSTRT1', ['strt1'])
WriteControlSTRT1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlSTRT2 = namedtuple('ReadControlSTRT2', [])
ReadControlSTRT2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlSTRT2 = namedtuple('ControlSTRT2', ['strt2'])
ControlSTRT2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlSTRT2 = namedtuple('WriteControlSTRT2', ['strt2'])
WriteControlSTRT2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))

class AddressGroup(object):
    SimErasable = 0x10
    MonReg = 0x21
    Fixed = 0x01
    MonChan = 0x22
    SimFixed = 0x11
    Channels = 0x02
    Erasable = 0x00
    Control = 0x20

class MonReg(object):
    A = 0x0000
    L = 0x0001
    Q = 0x0002
    Z = 0x0003
    BB = 0x0004
    B = 0x0005
    S = 0x0006
    G = 0x0007
    Y = 0x0008
    U = 0x0009
    I = 0x000A
    Status = 0x000B
    W = 0x0040
class MonChan(object):
    FEXT = 0x0007
class Control(object):
    Start = 0x0000
    Stop = 0x0001
    StopCause = 0x0002
    Proceed = 0x0003
    MNHRPT = 0x0004
    MNHNC = 0x0005
    S1S = 0x0006
    S1Bank = 0x0007
    S1SIgnore = 0x0008
    S1BankIgnore = 0x0009
    S2S = 0x000A
    S2Bank = 0x000B
    S2SIgnore = 0x000C
    S2BankIgnore = 0x000D
    NHALGA = 0x0040
    STRT1 = 0x0041
    STRT2 = 0x0042

def _pack_ReadSimErasable(msg):
    return _pack_read_msg(AddressGroup.SimErasable, msg.addr)

def _pack_WriteSimErasable(msg):
    return _pack_write_msg(AddressGroup.SimErasable, msg.addr, msg.data)

def _pack_ReadMonRegA(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.A)

def _pack_ReadMonRegL(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.L)

def _pack_ReadMonRegQ(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Q)

def _pack_ReadMonRegZ(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Z)

def _pack_ReadMonRegBB(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.BB)

def _pack_ReadMonRegB(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.B)

def _pack_ReadMonRegS(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.S)

def _pack_ReadMonRegG(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.G)

def _pack_ReadMonRegY(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Y)

def _pack_ReadMonRegU(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.U)

def _pack_ReadMonRegI(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.I)

def _pack_ReadMonRegStatus(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Status)

def _pack_ReadMonRegW(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.W)

def _pack_ReadFixed(msg):
    return _pack_read_msg(AddressGroup.Fixed, msg.addr)

def _pack_ReadMonChanFEXT(msg):
    return _pack_read_msg(AddressGroup.MonChan, MonChan.FEXT)

def _pack_ReadSimFixed(msg):
    return _pack_read_msg(AddressGroup.SimFixed, msg.addr)

def _pack_WriteSimFixed(msg):
    return _pack_write_msg(AddressGroup.SimFixed, msg.addr, msg.data)

def _pack_ReadChannels(msg):
    return _pack_read_msg(AddressGroup.Channels, msg.addr)

def _pack_ReadErasable(msg):
    return _pack_read_msg(AddressGroup.Erasable, msg.addr)

def _pack_WriteControlStart(msg):
    data = 0x0000
    data |= (msg.start & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Start, data)

def _pack_ReadControlStop(msg):
    return _pack_read_msg(AddressGroup.Control, Control.Stop)

def _pack_WriteControlStop(msg):
    data = 0x0000
    data |= (msg.t12 & 0x0001) << 0
    data |= (msg.nisq & 0x0001) << 1
    data |= (msg.s1 & 0x0001) << 2
    data |= (msg.s2 & 0x0001) << 3
    data |= (msg.w & 0x0001) << 4
    data |= (msg.s_w & 0x0001) << 5
    data |= (msg.s_i & 0x0001) << 6
    data |= (msg.chan & 0x0001) << 7
    data |= (msg.par & 0x0001) << 8
    data |= (msg.i & 0x0001) << 9
    data |= (msg.prog_step & 0x0001) << 10
    return _pack_write_msg(AddressGroup.Control, Control.Stop, data)

def _pack_ReadControlStopCause(msg):
    return _pack_read_msg(AddressGroup.Control, Control.StopCause)

def _pack_WriteControlProceed(msg):
    data = 0x0000
    data |= (msg.proceed & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Proceed, data)

def _pack_ReadControlMNHRPT(msg):
    return _pack_read_msg(AddressGroup.Control, Control.MNHRPT)

def _pack_WriteControlMNHRPT(msg):
    data = 0x0000
    data |= (msg.mnhrpt & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.MNHRPT, data)

def _pack_ReadControlMNHNC(msg):
    return _pack_read_msg(AddressGroup.Control, Control.MNHNC)

def _pack_WriteControlMNHNC(msg):
    data = 0x0000
    data |= (msg.mnhnc & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.MNHNC, data)

def _pack_ReadControlS1S(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1S)

def _pack_WriteControlS1S(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S1S, data)

def _pack_ReadControlS1Bank(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1Bank)

def _pack_WriteControlS1Bank(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S1Bank, data)

def _pack_ReadControlS1SIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1SIgnore)

def _pack_WriteControlS1SIgnore(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S1SIgnore, data)

def _pack_ReadControlS1BankIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1BankIgnore)

def _pack_WriteControlS1BankIgnore(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S1BankIgnore, data)

def _pack_ReadControlS2S(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2S)

def _pack_WriteControlS2S(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S2S, data)

def _pack_ReadControlS2Bank(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2Bank)

def _pack_WriteControlS2Bank(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S2Bank, data)

def _pack_ReadControlS2SIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2SIgnore)

def _pack_WriteControlS2SIgnore(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S2SIgnore, data)

def _pack_ReadControlS2BankIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2BankIgnore)

def _pack_WriteControlS2BankIgnore(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S2BankIgnore, data)

def _pack_ReadControlNHALGA(msg):
    return _pack_read_msg(AddressGroup.Control, Control.NHALGA)

def _pack_WriteControlNHALGA(msg):
    data = 0x0000
    data |= (msg.nhalga & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.NHALGA, data)

def _pack_ReadControlSTRT1(msg):
    return _pack_read_msg(AddressGroup.Control, Control.STRT1)

def _pack_WriteControlSTRT1(msg):
    data = 0x0000
    data |= (msg.strt1 & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.STRT1, data)

def _pack_ReadControlSTRT2(msg):
    return _pack_read_msg(AddressGroup.Control, Control.STRT2)

def _pack_WriteControlSTRT2(msg):
    data = 0x0000
    data |= (msg.strt2 & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.STRT2, data)


def _unpack_SimErasable(addr, data):
    return SimErasable(addr=addr, data=data)

def _unpack_MonRegA(data):
    return MonRegA(
        a = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegL(data):
    return MonRegL(
        l = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegQ(data):
    return MonRegQ(
        q = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegZ(data):
    return MonRegZ(
        z = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegBB(data):
    return MonRegBB(
        eb = (data >> 0) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_MonRegB(data):
    return MonRegB(
        b = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegS(data):
    return MonRegS(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_MonRegG(data):
    return MonRegG(
        g = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegY(data):
    return MonRegY(
        y = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegU(data):
    return MonRegU(
        u = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegI(data):
    return MonRegI(
        sqr = (data >> 0) & 0x003F,
        sqext = (data >> 6) & 0x0001,
        st = (data >> 7) & 0x0007,
        br = (data >> 10) & 0x0003,
    )

def _unpack_MonRegStatus(data):
    return MonRegStatus(
        gojam = (data >> 0) & 0x0001,
        run = (data >> 1) & 0x0001,
        iip = (data >> 2) & 0x0001,
        inhl = (data >> 3) & 0x0001,
        inkl = (data >> 4) & 0x0001,
        outcom = (data >> 5) & 0x0001,
    )

def _unpack_MonRegW(data):
    return MonRegW(
        w = (data >> 0) & 0xFFFF,
    )

def _unpack_Fixed(addr, data):
    return Fixed(addr=addr, data=data)

def _unpack_MonChanFEXT(data):
    return MonChanFEXT(
        fext = (data >> 0) & 0x0007,
    )

def _unpack_SimFixed(addr, data):
    return SimFixed(addr=addr, data=data)

def _unpack_Channels(addr, data):
    return Channels(addr=addr, data=data)

def _unpack_Erasable(addr, data):
    return Erasable(addr=addr, data=data)

def _unpack_ControlStop(data):
    return ControlStop(
        t12 = (data >> 0) & 0x0001,
        nisq = (data >> 1) & 0x0001,
        s1 = (data >> 2) & 0x0001,
        s2 = (data >> 3) & 0x0001,
        w = (data >> 4) & 0x0001,
        s_w = (data >> 5) & 0x0001,
        s_i = (data >> 6) & 0x0001,
        chan = (data >> 7) & 0x0001,
        par = (data >> 8) & 0x0001,
        i = (data >> 9) & 0x0001,
        prog_step = (data >> 10) & 0x0001,
    )

def _unpack_ControlStopCause(data):
    return ControlStopCause(
        t12 = (data >> 0) & 0x0001,
        nisq = (data >> 1) & 0x0001,
    )

def _unpack_ControlMNHRPT(data):
    return ControlMNHRPT(
        mnhrpt = (data >> 0) & 0x0001,
    )

def _unpack_ControlMNHNC(data):
    return ControlMNHNC(
        mnhnc = (data >> 0) & 0x0001,
    )

def _unpack_ControlS1S(data):
    return ControlS1S(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS1Bank(data):
    return ControlS1Bank(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlS1SIgnore(data):
    return ControlS1SIgnore(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS1BankIgnore(data):
    return ControlS1BankIgnore(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlS2S(data):
    return ControlS2S(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS2Bank(data):
    return ControlS2Bank(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlS2SIgnore(data):
    return ControlS2SIgnore(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS2BankIgnore(data):
    return ControlS2BankIgnore(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlNHALGA(data):
    return ControlNHALGA(
        nhalga = (data >> 0) & 0x0001,
    )

def _unpack_ControlSTRT1(data):
    return ControlSTRT1(
        strt1 = (data >> 0) & 0x0001,
    )

def _unpack_ControlSTRT2(data):
    return ControlSTRT2(
        strt2 = (data >> 0) & 0x0001,
    )


_unpack_reg_fns = {
    (DATA_FLAG | AddressGroup.MonReg, MonReg.A): _unpack_MonRegA,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.L): _unpack_MonRegL,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Q): _unpack_MonRegQ,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Z): _unpack_MonRegZ,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.BB): _unpack_MonRegBB,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.B): _unpack_MonRegB,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.S): _unpack_MonRegS,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.G): _unpack_MonRegG,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Y): _unpack_MonRegY,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.U): _unpack_MonRegU,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.I): _unpack_MonRegI,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Status): _unpack_MonRegStatus,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.W): _unpack_MonRegW,
    (DATA_FLAG | AddressGroup.MonChan, MonChan.FEXT): _unpack_MonChanFEXT,
    (DATA_FLAG | AddressGroup.Control, Control.Stop): _unpack_ControlStop,
    (DATA_FLAG | AddressGroup.Control, Control.StopCause): _unpack_ControlStopCause,
    (DATA_FLAG | AddressGroup.Control, Control.MNHRPT): _unpack_ControlMNHRPT,
    (DATA_FLAG | AddressGroup.Control, Control.MNHNC): _unpack_ControlMNHNC,
    (DATA_FLAG | AddressGroup.Control, Control.S1S): _unpack_ControlS1S,
    (DATA_FLAG | AddressGroup.Control, Control.S1Bank): _unpack_ControlS1Bank,
    (DATA_FLAG | AddressGroup.Control, Control.S1SIgnore): _unpack_ControlS1SIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.S1BankIgnore): _unpack_ControlS1BankIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.S2S): _unpack_ControlS2S,
    (DATA_FLAG | AddressGroup.Control, Control.S2Bank): _unpack_ControlS2Bank,
    (DATA_FLAG | AddressGroup.Control, Control.S2SIgnore): _unpack_ControlS2SIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.S2BankIgnore): _unpack_ControlS2BankIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.NHALGA): _unpack_ControlNHALGA,
    (DATA_FLAG | AddressGroup.Control, Control.STRT1): _unpack_ControlSTRT1,
    (DATA_FLAG | AddressGroup.Control, Control.STRT2): _unpack_ControlSTRT2,
}

_unpack_mem_fns = {
    (DATA_FLAG | AddressGroup.SimErasable): _unpack_SimErasable,
    (DATA_FLAG | AddressGroup.Fixed): _unpack_Fixed,
    (DATA_FLAG | AddressGroup.SimFixed): _unpack_SimFixed,
    (DATA_FLAG | AddressGroup.Channels): _unpack_Channels,
    (DATA_FLAG | AddressGroup.Erasable): _unpack_Erasable,
}

def _pack_write_msg(group, addr, data):
    return struct.pack(DATA_FMT, DATA_FLAG | group, addr, data)

def _pack_read_msg(group, addr):
    return struct.pack(READ_FMT, group, addr)

