# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# ! AUTOGENERATED BY generate_interface.py, DO NOT EDIT !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
from collections import namedtuple
import struct

DATA_FMT = '>BHH'
READ_FMT = '>BH'
WRITE_FLAG = 0x80

def pack(msg):
    return globals()['_pack_' + type(msg).__name__](msg)

def unpack(msg_bytes):
    if len(msg_bytes) != struct.calcsize(DATA_FMT):
        raise RuntimeError('Cannot unpack data with unexpected length %u' % len(msg_bytes))

    group, addr, data = struct.unpack(DATA_FMT, msg_bytes)
    if group in _unpack_mem_fns:
        return _unpack_mem_fns[group](addr, data)
    else:
        return _unpack_reg_fns[(group, addr)](data)

ReadSimErasable = namedtuple('ReadSimErasable', ['addr'])
SimErasable = namedtuple('SimErasable', ['addr', 'data'])
WriteSimErasable = namedtuple('WriteSimErasable', ['addr', 'data'])
ReadFixed = namedtuple('ReadFixed', ['addr'])
Fixed = namedtuple('Fixed', ['addr', 'data'])
ReadSimFixed = namedtuple('ReadSimFixed', ['addr'])
SimFixed = namedtuple('SimFixed', ['addr', 'data'])
WriteSimFixed = namedtuple('WriteSimFixed', ['addr', 'data'])
ReadChannels = namedtuple('ReadChannels', ['addr'])
Channels = namedtuple('Channels', ['addr', 'data'])
ReadErasable = namedtuple('ReadErasable', ['addr'])
Erasable = namedtuple('Erasable', ['addr', 'data'])
WriteControlStart = namedtuple('WriteControlStart', ['start'])
ReadControlStop = namedtuple('ReadControlStop', [])
ControlStop = namedtuple('ControlStop', ['t12', 'nisq'])
WriteControlStop = namedtuple('WriteControlStop', ['t12', 'nisq'])
ReadControlStopCause = namedtuple('ReadControlStopCause', [])
ControlStopCause = namedtuple('ControlStopCause', ['t12', 'nisq'])
WriteControlProceed = namedtuple('WriteControlProceed', ['proceed'])
ReadControlMNHRPT = namedtuple('ReadControlMNHRPT', [])
ControlMNHRPT = namedtuple('ControlMNHRPT', ['mnhrpt'])
WriteControlMNHRPT = namedtuple('WriteControlMNHRPT', ['mnhrpt'])
ReadControlMNHNC = namedtuple('ReadControlMNHNC', [])
ControlMNHNC = namedtuple('ControlMNHNC', ['mnhnc'])
WriteControlMNHNC = namedtuple('WriteControlMNHNC', ['mnhnc'])

class AddressGroup(object):
    SimErasable = 0x10
    Fixed = 0x01
    SimFixed = 0x11
    Channels = 0x02
    Erasable = 0x00
    Control = 0x20

class Control(object):
    Start = 0x0000
    Stop = 0x0001
    StopCause = 0x0002
    Proceed = 0x0003
    MNHRPT = 0x0004
    MNHNC = 0x0005

def _pack_ReadSimErasable(msg):
    return _pack_read_msg(AddressGroup.SimErasable, msg.addr)

def _pack_WriteSimErasable(msg):
    return _pack_write_msg(AddressGroup.SimErasable, msg.addr, msg.data)

def _pack_ReadFixed(msg):
    return _pack_read_msg(AddressGroup.Fixed, msg.addr)

def _pack_ReadSimFixed(msg):
    return _pack_read_msg(AddressGroup.SimFixed, msg.addr)

def _pack_WriteSimFixed(msg):
    return _pack_write_msg(AddressGroup.SimFixed, msg.addr, msg.data)

def _pack_ReadChannels(msg):
    return _pack_read_msg(AddressGroup.Channels, msg.addr)

def _pack_ReadErasable(msg):
    return _pack_read_msg(AddressGroup.Erasable, msg.addr)

def _pack_WriteControlStart(msg):
    data = 0x0000
    data |= (msg.start & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Start, data)

def _pack_ReadControlStop(msg):
    return _pack_read_msg(AddressGroup.Control, Control.Stop)

def _pack_WriteControlStop(msg):
    data = 0x0000
    data |= (msg.t12 & 0x0001) << 0
    data |= (msg.nisq & 0x0001) << 1
    return _pack_write_msg(AddressGroup.Control, Control.Stop, data)

def _pack_ReadControlStopCause(msg):
    return _pack_read_msg(AddressGroup.Control, Control.StopCause)

def _pack_WriteControlProceed(msg):
    data = 0x0000
    data |= (msg.proceed & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Proceed, data)

def _pack_ReadControlMNHRPT(msg):
    return _pack_read_msg(AddressGroup.Control, Control.MNHRPT)

def _pack_WriteControlMNHRPT(msg):
    data = 0x0000
    data |= (msg.mnhrpt & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.MNHRPT, data)

def _pack_ReadControlMNHNC(msg):
    return _pack_read_msg(AddressGroup.Control, Control.MNHNC)

def _pack_WriteControlMNHNC(msg):
    data = 0x0000
    data |= (msg.mnhnc & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.MNHNC, data)


def _unpack_SimErasable(addr, data):
    return SimErasable(addr=addr, data=data)

def _unpack_Fixed(addr, data):
    return Fixed(addr=addr, data=data)

def _unpack_SimFixed(addr, data):
    return SimFixed(addr=addr, data=data)

def _unpack_Channels(addr, data):
    return Channels(addr=addr, data=data)

def _unpack_Erasable(addr, data):
    return Erasable(addr=addr, data=data)

def _unpack_ControlStop(data):
    return ControlStop(
        t12 = (data >> 0) & 0x0001,
        nisq = (data >> 1) & 0x0001,
    )

def _unpack_ControlStopCause(data):
    return ControlStopCause(
        t12 = (data >> 0) & 0x0001,
        nisq = (data >> 1) & 0x0001,
    )

def _unpack_ControlMNHRPT(data):
    return ControlMNHRPT(
        mnhrpt = (data >> 0) & 0x0001,
    )

def _unpack_ControlMNHNC(data):
    return ControlMNHNC(
        mnhnc = (data >> 0) & 0x0001,
    )


_unpack_reg_fns = {
    (AddressGroup.Control, Control.Stop): _unpack_ControlStop,
    (AddressGroup.Control, Control.StopCause): _unpack_ControlStopCause,
    (AddressGroup.Control, Control.MNHRPT): _unpack_ControlMNHRPT,
    (AddressGroup.Control, Control.MNHNC): _unpack_ControlMNHNC,
}

_unpack_mem_fns = {
    (AddressGroup.SimErasable): _unpack_SimErasable,
    (AddressGroup.Fixed): _unpack_Fixed,
    (AddressGroup.SimFixed): _unpack_SimFixed,
    (AddressGroup.Channels): _unpack_Channels,
    (AddressGroup.Erasable): _unpack_Erasable,
}

def _pack_write_msg(group, addr, data):
    return struct.pack(DATA_FMT, WRITE_FLAG | group, addr, data)

def _pack_read_msg(group, addr):
    return struct.pack(READ_FMT, group, addr)

